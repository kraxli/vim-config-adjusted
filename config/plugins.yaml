# PLUGINS
# ==========================================

# Notes:
#   hook_add: load at Neovim startup
#   hook_source: load when plugin is started/sourced

# Startup
# -------
- repo: Shougo/dein.vim
- repo: Shougo/unite.vim # dway vim-config-adjusted
- repo: Shougo/vimfiler.vim # dway vim-config-adjusted
- repo: qpkorr/vim-bufkill # dway vim-config-adjusted
  hook_add: |
    command! B :BD
- repo: xolox/vim-shell # dway: vim-config-adjusted
- repo: xolox/vim-misc  # dway: vim-config-adjusted
- repo: rafi/awesome-vim-colorschemes
- repo: rafi/vim-badge
- repo: thinca/vim-localrc
- repo: christoomey/vim-tmux-navigator
- repo: junegunn/vim-peekaboo
- repo: tpope/vim-sleuth
- repo: itchyny/vim-gitbranch
- repo: itchyny/vim-parenmatch
- repo: itchyny/vim-cursorword
  hook_add: |
    autocmd MyAutoCmd FileType denite,qf,nerdtree let b:cursorword=0
    autocmd MyAutoCmd InsertEnter * let b:cursorword=0
    autocmd MyAutoCmd InsertLeave * let b:cursorword=1

# dway: vim-config-adjusted
- repo: kraxli/vimwiki-task
  on_ft: [vimwiki, wiki]
  hook_add: |
    set spell spelllang=en,de

- repo: vim-pandoc/vim-pandoc
  on_ft: [pandoc, pdc, md]
  hook_add: |
    set spell spelllang=en,de
    setlocal foldlevel=0
    au BufRead,BufNewFile *.md set filetype=pandoc
    let g:pandoc#formatting#extra_equalprg = "--reference-links --atx-headers --wrap=none"
    let g:pandoc#folding#level=0

# let g:pandoc#formatting#mode = "hA"
# let g:pandoc#formatting#smart_autoformat_on_cursormoved = 1
# let g:pandoc#folding#level = 2
# let g:pandoc#folding#mode = "relative"
# let g:pandoc#after#modules#enabled = ["nrrwrgn", "tablemode"]
# let g:pandoc#completion#bib#mode = 'citeproc'
# let g:pandoc#syntax#colorcolumn = 1

# nunmap <m-Left>
# nunmap <m-Right>
# nmap <silent> <m-Left> :wincmd h<CR>
# nmap <silent> <m-Left> :wincmd h<CR>
# nmap <silent> <m-Right> :wincmd l<CR>
# nmap <m-Right> <c-w>l
# nmap <m-Left> <c-w>h
# source $HOME/.config/nvim/config/mappings.vim
#  hook_source: |
#  au MyAutoCmd BufEnter,BufRead *.pdc,*.pandoc setlocal filetype=pandoc
# nmap <leader>tb :TagbarToggle<CR>

- repo: vim-pandoc/vim-pandoc-syntax
  on_ft: [pandoc, pdc]

#  depends: vim-pandoc

- repo: vim-pandoc/vim-pandoc-after
  on_ft: [pandoc, pdc]

#  hook_add: |
#    au MyAutoCmd BufEnter,BufRead *.pdc,*.pandoc set filetype=pandoc

# - repo: kassio/neoterm # dway: vim-config-adjusted
# .../iron-nvim

# - repo: janko-m/vim-test
#   on_ft: [py, python]
#   hook_add: |
#     let test#strategy = "neovim"
#     let test#python#runner = "pytest"

# # Runners available are 'pytest', 'nose', 'nose2', 'djangotest', 'djangonose' and Python's built-in 'unittest'
# # or let test#strategy = 'neomake'

- repo: kraxli/nvim-py-minimal
  on_ft: [py, python]
  hook_add:
    let g:nvimipdb_default_keys = 1

- repo: idanarye/vim-dutyl # dway: vim-config-adjusted
  on_ft: d
  hook_post_source: |
    autocmd MyAutoCmd BufRead,BufEnter *.d DUDCDrestartServer

- repo: python-rope/ropevim
  on_ft: py

# - repo: nvie/vim-pyunit
# on_ft: py

- repo: alfredodeza/pytest.vim
  on_ft: [py, python]

- repo: jalvesaq/Nvim-R
  on_ft: r
  hook_add: |
    let R_rconsole_width = 57
    let R_min_editor_width = 18
    autocmd! MyAutoCmd VimResized * let R_rconsole_width = winwidth(0) / 2

# dway: vim-config-adjusted

# ==========================================
# Lazy Loading
# ==========================================

# Languages
# ---------
- { repo: hail2u/vim-css3-syntax, on_ft: css }
- { repo: ap/vim-css-color, on_ft: [ css, scss, sass ] }
- { repo: cakebaker/scss-syntax.vim, on_ft: [ scss, sass ]}
- { repo: groenewege/vim-less, on_ft: less }
- { repo: othree/csscomplete.vim, on_ft: css }

- { repo: pearofducks/ansible-vim, on_ft: ansible }
- { repo: mitsuhiko/vim-jinja, on_ft: [ htmljinja, jinja ]}
- { repo: mustache/vim-mustache-handlebars, on_ft: html }

- repo: othree/html5.vim
  on_ft: html
  hook_add: |
    let g:html5_event_handler_attributes_complete = 0
    let g:html5_rdfa_attributes_complete = 0
    let g:html5_microdata_attributes_complete = 0
    let g:html5_aria_attributes_complete = 0

# - repo: plasticboy/vim-markdown
#   on_ft: markdown
#   hook_add: |
#     let g:vim_markdown_override_foldtext = 0
#     let g:vim_markdown_initial_foldlevel = 999
#     let g:vim_markdown_new_list_item_indent = 2
#     let g:vim_markdown_frontmatter = 1
#     let g:vim_markdown_conceal = 0
#     let g:vim_markdown_fenced_languages = [
#       \ 'c++=cpp',
#       \ 'viml=vim',
#       \ 'bash=sh',
#       \ 'ini=dosini'
#       \ ]
#   hook_post_source: |
#     au BufNewFile,BufRead,BufEnter *.md set filetype=pandoc

# - repo: rhysd/vim-gfm-syntax
#   depends: vim-markdown
#   on_ft: markdown
#   hook_source: |
#     let g:gfm_syntax_enable_always = 0
#     let g:gfm_syntax_highlight_emoji = 0
#     let g:gfm_syntax_enable_filetypes = ['markdown']

- repo: pangloss/vim-javascript
  on_ft: [ javascript, jsx, javascript.jsx ]
  hook_source: |
    let g:javascript_plugin_jsdoc = 1
    let g:javascript_plugin_flow = 1
    highlight! link jsFutureKeys PreProc

- { repo: othree/jspc.vim, on_ft: [ javascript, jsx, javascript.jsx ] }
- { repo: MaxMEllon/vim-jsx-pretty, on_ft: [ javascript, jsx, javascript.jsx ]}
- { repo: heavenshell/vim-jsdoc, on_ft: [ javascript, jsx, javascript.jsx ] }
- { repo: moll/vim-node, on_ft: [ javascript, jsx, javascript.jsx ] }
- { repo: elzr/vim-json, on_ft: json }

# pangloss/javascript vs. othree/yajs
#- { repo: othree/yajs.vim, on_ft: [ javascript, jsx, javascript.jsx ]}
#- { repo: gavocanov/vim-js-indent, on_ft: [ javascript, jsx, javascript.jsx ]}
#- repo: mxw/vim-jsx
#  on_ft: [ javascript, jsx, javascript.jsx ]
#  hook_source: let g:jsx_ext_required = 0

- repo: fatih/vim-go
  on_ft: go
  hook_source: |
    let g:go_def_mapping_enabled = 0
    let g:go_loaded_gosnippets = 1
    let g:go_snippet_engine = 'neosnippet'
    let g:go_highlight_extra_types = 1
    let g:go_highlight_operators = 1

- { repo: vim-python/python-syntax, on_ft: python }
- { repo: Vimjas/vim-python-pep8-indent, on_ft: python }
- { repo: vim-scripts/python_match.vim, on_ft: python }
- { repo: tmhedberg/SimpylFold, on_ft: python }
- { repo: raimon49/requirements.txt.vim, on_ft: requirements }

- { repo: StanAngeloff/php.vim, on_ft: php }
- { repo: shawncplus/phpcomplete.vim, on_ft: php, on_i: 1 }

- { repo: tbastos/vim-lua, on_ft: lua }
- { repo: osyo-manga/vim-monster, on_ft: ruby }
- { repo: toyamarinyon/vim-swift, on_ft: swift }
- { repo: vim-jp/syntax-vim-ex, on_ft: vim }

- { repo: chrisbra/csv.vim, on_ft: csv }
- { repo: tpope/vim-git, on_ft: [ gitcommit, gitrebase, gitconfig ]}
- { repo: ekalinin/Dockerfile.vim, on_ft: [ Dockerfile, docker-compose ]}
- { repo: tmux-plugins/vim-tmux, on_ft: tmux }
- { repo: andreshazard/vim-logreview, on_ft: logreview }

- { repo: cespare/vim-toml, on_ft: toml }
- { repo: PotatoesMaster/i3-vim-syntax, on_ft: i3 }
- { repo: dag/vim-fish, on_ft: fish }
- { repo: jstrater/mpvim, on_ft: portfile }
- { repo: robbles/logstash.vim, on_ft: logstash }
- { repo: exu/pgsql.vim, on_ft: pgsql }
- { repo: othree/nginx-contrib-vim, on_ft: nginx }
- { repo: IN3D/vim-raml, on_ft: raml }

# ==========================================
# Commands
# --------
## dway vim-config-adjusted (commented out)
# - repo: scrooloose/nerdtree
#   depends: nerdtree-git-plugin
#   on_map: { n: <Plug> }
#   hook_post_source: source $VIMPATH/config/plugins/nerdtree.vim

# - { repo: Xuyuanp/nerdtree-git-plugin, on_source: nerdtree }
- { repo: tpope/vim-commentary, on_map: <Plug>Commentary }
- { repo: t9md/vim-choosewin, on_map: { n: <Plug> }}
- { repo: Shougo/vinarise.vim, on_cmd: Vinarise }
- { repo: kana/vim-niceblock, on_map: { x: <Plug> }}
- { repo: guns/xterm-color-table.vim, on_cmd: XtermColorTable }
- { repo: mbbill/undotree, on_cmd: UndotreeToggle }
- { repo: metakirby5/codi.vim, on_cmd: Codi, if: empty($VIM_MINIMAL) }
- { repo: Shougo/vimproc.vim, build: make, on_func: vimproc# }
- { repo: reedes/vim-wordy, on_cmd: [ Wordy, NextWordy, PrevWordy ]}
- { repo: brooth/far.vim, on_cmd: [ Far, Farp, F ] }
- { repo: jreybert/vimagit, on_cmd: Magit }

- repo: easymotion/vim-easymotion
  on_map: { n: <Plug> }
  hook_source: |
    let g:EasyMotion_do_mapping = 0
    let g:EasyMotion_prompt = 'Jump to → '
    let g:EasyMotion_keys = 'fjdksweoavn'
    let g:EasyMotion_smartcase = 1
    let g:EasyMotion_use_smartsign_us = 1

- repo: chemzqm/vim-easygit
  on_cmd: [
    \ Gcd, Glcd, Gblame, GcommitCurrent, GdiffThis,
    \ Gcommit, Gedit, Gdiff, Gremove, Grename, Gmove,
    \ Gcheckout, Gpush, Gpull, Gfetch, Gadd, Gstatus, Ggrep, Gmerg]
  hook_source: |
    let g:easygit_enable_command = 1
  hook_add: |
    command! -nargs=+ Git :AsyncRun git <args>
    command! GaddAll :Gadd --all
    command! -nargs=+ GcommitAll :AsyncRun git commit -m <q-args> -a

# command! -nargs=+ GcommitAll execute 'AsyncRun git commit -m "'.string(<args>).'" -a'
# command! -nargs=+ Git :NeomakeSh git <args>
# command! GaddAll :Gadd --all
# command! -nargs=+ GcommitAll :NeomakeSh git commit -m <args> -a

# command! -nargs=+ GcommitThis :NeomakeSh git add %:p|
#   \:NeomakeSh git commit -m <args> %:p

# see also denite-git bellow for log and status


# - repo: tpope/vim-fugitive
#   on_cmd: [Gedit, Gsplit, Gvsplit, Gtabedit, Gdiff, Ggrep, Gbrowse, Git, Glog, Gread, Gwrite, Gmove, Gdelete, Gbrowse, Gstatus, Ggrep]

- repo: majutsushi/tagbar
  if: empty($VIM_MINIMAL)
  on_cmd: TagbarToggle
  hook_source: |
    let g:tagbar_width = 25
    if executable('jsctags')
      let g:tagbar_type_javascript = { 'ctagsbin': 'jsctags' }
    endif

- repo: beloglazov/vim-online-thesaurus
  if: empty($VIM_MINIMAL)
  on_cmd: [ OnlineThesaurusCurrentWord, Thesaurus ]
  hook_source: let g:online_thesaurus_map_keys = 0

# ==========================================
# Interface
# ---------
- { repo: haya14busa/vim-asterisk, on_map: { nv: <Plug> }}
- { repo: rhysd/accelerated-jk, on_map: { n: <Plug> }}

- repo: airblade/vim-gitgutter
  on_path: .*
  hook_source: |
    let g:gitgutter_map_keys = 0
    let g:gitgutter_sh = $SHELL

- repo: Yggdroot/indentLine
  hook_add: |
    let g:indentLine_char =  '▏'
    set list lcs=tab:\|\

# set list lcs=tab:\▏\

# - repo: nathanaelkane/vim-indent-guides
#   on_cmd: [ IndentGuidesEnable, IndentGuidesDisable, IndentGuidesToggle ]
#   hook_post_source: |
#     call indent_guides#init_script_vars()
#     call indent_guides#highlight_colors()
#   hook_add: |
#     let g:indent_guides_color_change_percent = 3
#     let g:indent_guides_autocmds_enabled = 0
#     let g:indent_guides_default_mapping = 0
#     let g:indent_guides_guide_size = 1
#     let g:indent_guides_indent_levels = 15
#     let g:custom_exclude = [ 'help', 'denite', 'codi' ]
#     autocmd MyAutoCmd BufEnter *
#       \ if ! empty(&l:filetype) && index(g:custom_exclude, &l:filetype) == -1
#       \|   if g:indent_guides_autocmds_enabled == 0 && &l:expandtab
#       \|     IndentGuidesEnable
#       \|   elseif g:indent_guides_autocmds_enabled == 1 && ! &l:expandtab
#       \|     IndentGuidesDisable
#       \|   endif
#       \| endif

- repo: MattesGroeger/vim-bookmarks
  on_path: .*
  hook_source: |
    let g:bookmark_auto_save_file = $VARPATH.'/bookmarks'
    let g:bookmark_no_default_key_mappings = 1
    let g:bookmark_disable_ctrlp = 1

- repo: rhysd/committia.vim
  on_path: COMMIT_EDITMSG
  hook_source: let g:committia_min_window_width = 70

- repo: neomake/neomake
  if: has('nvim') && empty($VIM_MINIMAL)
  on_cmd: Neomake
  hook_source: source $VIMPATH/config/plugins/neomake.vim
  hook_add: |
    let g:lint_filetypes = [
      \  'ansible', 'python', 'php', 'ruby', 'vim', 'go', 'sh',
      \  'javascript', 'jsx', 'javascript.jsx', 'json', 'css',
      \  'markdown', 'html', 'yaml', 'd', 'dlang'
      \ ]
    autocmd MyAutoCmd BufWritePost *
      \ if index(g:lint_filetypes, &filetype) > -1 && empty(&buftype)
      \|   Neomake
      \| elseif &filetype =~ 'html'
      \|   Neomake tidy
      \| endif

- repo: junegunn/goyo.vim
  if: empty($VIM_MINIMAL)
  depends: limelight.vim
  on_cmd: Goyo
  hook_source: source $VIMPATH/config/plugins/goyo.vim

- repo: junegunn/limelight.vim
  if: empty($VIM_MINIMAL)
  on_cmd: Limelight

- repo: itchyny/calendar.vim
  if: empty($VIM_MINIMAL)
  on_cmd: Calendar
  hook_source: |
    let g:calendar_google_calendar = 1
    let g:calendar_google_task = 1

- repo: vimwiki/vimwiki
  if: empty($VIM_MINIMAL)
  on_ft: [vimwiki, wiki]
  on_map: { n: <Plug> }
  on_cmd: [Vimwiki, VimwikiTabIndex]
  hook_add: |
    let g:vimwiki_use_calendar = 1
    let g:vimwiki_hl_headers = 1
    let g:vimwiki_hl_cb_checked = 1
    let g:vimwiki_autowriteall = 0
    au FileType pandoc,markdown,tex,vimwiki,txt setl conceallevel=2 concealcursor=nv

# hook_post_source: |
#   nunmap <m-Left>
#   nunmap <m-Right>
#   nmap <silent> <m-Left> :wincmd h<CR>
#   nmap <silent> <m-Right> :wincmd l<CR>


# hook_source: |
#   autocmd BufEnter,BufRead *.wiki nunmap <m-Left>
#   autocmd BufEnter,BufRead *.wiki map <silent> <m-Left> :wincmd h<CR>
#   autocmd BufEnter,BufRead *.wiki map <silent> <m-Right> :wincmd l<CR>

# hook_source: |
#   let g:vimwiki_list = [
#   \   { 'diary_header': 'Diary',
#   \     'diary_link_fmt': '%Y-%m/%d',
#   \     'auto_toc': 1,
#   \     'path': '~/Dropbox/VimWiki/',
#   \     'path_html': '~/Dropbox/VimWiki/vimwiki_html/',
#   \     'template_path': '~/Dropbox/VimWiki/templates',
#   \     'template_default': 'default',
#   \     'template_ext': '.html'},
#   \   { 'path': '~/docs/blog/',
#   \     'syntax': 'markdown',
#   \     'ext': '.md' }
#   \ ]

# dway: vim-config-adjusted
# - repo: xolox/vim-notes
#   on_cmd: Note

# ==========================================
# Completion
# ----------
- repo: Shougo/deoplete.nvim
  depends: context_filetype.vim
  if: has('nvim') && empty($VIM_MINIMAL)
  on_i: 1
  hook_add: let g:deoplete#enable_at_startup = 1
  hook_source: source $VIMPATH/config/plugins/deoplete.vim

- repo: Shougo/neocomplete
  depends: context_filetype.vim
  if: ! has('nvim') && has('lua') && empty($VIM_MINIMAL)
  on_event: InsertEnter
  hook_add: |
    let g:neocomplete#data_directory = $VARPATH.'/complete'
    let g:neocomplete#enable_at_startup = 1
  hook_source: source $VIMPATH/config/plugins/neocomplete.vim

# dway: vim-config-adjusted (see also bellow for g:neosnippet#data_directory)
- repo: honza/vim-snippets
- repo: kiith-sa/DSnips

# https://www.gregjs.com/vim/2016/neovim-deoplete-jspc-ultisnips-and-tern-a-config-for-kickass-autocompletion/
- repo: SirVer/ultisnips
  depends: [ vim-snippets, DSnips ]
  hook_add: |
    let g:UltiSnipsSnippetsDir=['UltiSnips',
      \ $VARPATH. '/dein/repos/github.com' . '/honza/vim-snippets/UltiSnips',
      \ $VARPATH . '/dein/repos/github.com' . "/kiith-sa/DSnips"]
    let g:UltiSnipsUsePythonVersion = 3
    let g:UltiSnipsEditSplit="vertical"

#   on_event: InsertCharPre
#   on_ft: snippets
#   hook_add: |
#     let g:UltiSnipsUsePythonVersion = 3
#     let g:UltiSnipsListSnippets="<c-ll>"
#     let g:UltiSnipsExpandTrigger="<c-ll>"
#     let g:UltiSnipsJumpForwardTrigger="<c-o>"
#     let g:UltiSnipsJumpBackwardTrigger="<c-s-o>"
#     let g:UltiSnipsEditSplit="vertical"


- repo: Shougo/neosnippet.vim
  depends: [ neosnippet-snippets, vim-snippets, context_filetype.vim ]
  if: empty($VIM_MINIMAL)
  on_event: InsertCharPre
  on_ft: snippet
  hook_add: |
    let g:neosnippet#data_directory = $VARPATH. '/dein/repos/github.com' . '/honza/vim-snippets/snippets'
    let g:neosnippet#snippets_directory = [
            \ $VARPATH . '/dein/repos/github.com' . '/honza/vim-snippets/snippets',
            \ '~/.config/nvim/snippets']
  hook_source: |
    let g:neosnippet#enable_snipmate_compatibility = 1
    let g:neosnippet#enable_completed_snippet = 1
    let g:neosnippet#expand_word_boundary = 1
    autocmd MyAutoCmd InsertLeave * NeoSnippetClearMarkers

# let g:neosnippet#data_directory = $VARPATH.'/snippets'

- repo: ludovicchabant/vim-gutentags
  if: executable('ctags') && empty($VIM_MINIMAL)
  on_path: .*
  hook_add: |
    let g:gutentags_cache_dir = $VARPATH.'/tags'
    let g:gutentags_generate_on_write = 1
    let g:gutentags_generate_on_missing = 0
    let g:gutentags_generate_on_new = 0

- repo: mattn/emmet-vim
  if: empty($VIM_MINIMAL)
  on_i: 1
  on_ft: [ html, css, jsx, javascript, javascript.jsx ]
  hook_source: |
    let g:use_emmet_complete_tag = 0
    let g:user_emmet_install_global = 0
    let g:user_emmet_install_command = 0
    let g:user_emmet_mode = 'i'

- repo: Shougo/echodoc.vim
  if: empty($VIM_MINIMAL)
  on_event: CompleteDone
  hook_post_source: call echodoc#enable()

- repo: Raimondi/delimitMate
  on_i: 1
  hook_source: |
    let g:delimitMate_expand_cr = 1
    let g:delimitMate_excluded_ft = 'html'

- { repo: Shougo/neosnippet-snippets, if: empty($VIM_MINIMAL) }
- { repo: Shougo/context_filetype.vim, lazy: 1, if: empty($VIM_MINIMAL) }
- { repo: Shougo/neco-vim, on_ft: vim, if: empty($VIM_MINIMAL) }
- { repo: Shougo/neco-syntax, on_source: [ neocomplete.vim, deoplete.nvim ]}

- repo: davidhalter/jedi-vim
  if: empty($VIM_MINIMAL)
  on_ft: python
  hook_add: |
    let g:jedi#completions_enabled = 0
    let g:jedi#auto_vim_configuration = 0
    let g:jedi#smart_auto_mappings = 0
    let g:jedi#show_call_signatures = 1
  hook_source: |
    let g:jedi#use_tag_stack = 0
    let g:jedi#popup_select_first = 0
    let g:jedi#popup_on_dot = 0
    let g:jedi#max_doc_height = 100
    let g:jedi#quickfix_window_height = 10
    let g:jedi#use_splits_not_buffers = 'right'

- repo: fisadev/vim-isort


# Only NeoVim ------------------------------

# dway: vim-config-adjusted
- repo: landaire/deoplete-d
  if: has('nvim')
  on_ft: d
  on_i: 1

- repo: zchee/deoplete-go
  if: has('nvim') && empty($VIM_MINIMAL)
  on_ft: go
  on_i: 1

- repo: zchee/deoplete-jedi
  if: has('nvim') && empty($VIM_MINIMAL)
  on_ft: python
  on_i: 1
  hook_source: autocmd MyAutoCmd FileType python setlocal omnifunc=

- repo: carlitux/deoplete-ternjs
  build: npm install -g tern
  if: executable('npm') && has('nvim') && empty($VIM_MINIMAL)
  on_i: 1
  on_ft: [ javascript, jsx, javascript.jsx ]
  hook_source: |
    let g:tern_request_timeout = 1
    let g:tern_show_signature_in_pum = 0

- repo: wellle/tmux-complete.vim
  if: has('nvim') && empty($VIM_MINIMAL)
  on_i: 1
  hook_add: let g:tmuxcomplete#trigger = ''

- repo: ternjs/tern_for_vim
  build: npm install
  if: executable('npm') && empty($VIM_MINIMAL)
  on_i: 1
  on_ft: [ javascript, jsx, javascript.jsx ]
  hook_add: |
    let g:tern#command = ['tern']
    let g:tern#arguments = ['--persistent']
    let g:tern_request_timeout = 1
    let g:tern_show_signature_in_pum = 0
  hook_post_source: |
    autocmd MyAutoCmd FileType javascript setlocal omnifunc=tern#Complete

# ==========================================
# Denite
# ------
- repo: Shougo/denite.nvim
  on_cmd: Denite
  hook_source: source $VIMPATH/config/plugins/denite.vim
  hook_post_source: source $VIMPATH/config/menus.vim

- { repo: chemzqm/unite-location, on_source: denite.nvim }
- { repo: rafi/vim-denite-z, on_source: denite.nvim }
- { repo: rafi/vim-denite-session, on_source: denite.nvim }

# dway / kraxli: add commands for denite-git
- repo: chemzqm/denite-git
  on_source: denite.nvim
  hook_add: |
    command! Glog :Denite gitlog
    command! Gstatus2 :Denite gitstatus
    command! Gchanged :Denite gitchanged

- repo: rafi/vim-denite-mpc
  if: executable('mpc') && empty($VIM_MINIMAL)
  on_source: denite.nvim
  hook_source: call denite#custom#var('mpc', 'default_view', 'date')

# dway: vim-config-adjusted
- repo: rafi/vim-denite-task
  on_source: denite.nvim
  hook_source: |
    call denite#custom#var('task', 'taskrc', '~/.taskrc')
    call denite#custom#var('task', 'data_dir', '~/.task')
    call denite#custom#var('task', 'date_format', '%y-%m-%d %H:%M')
    call denite#custom#var('task', 'format', '{id:3.3} | {priority:1.1} | {project:15.15} | {description:40.40} | {entry} | {due}')
    call denite#custom#var('task', 'label_width', 17)
    call denite#custom#var('task', 'formats', {
      \     'format': '{id:3.3} | {priority:1.1} | {project:15.15} | {description}',
      \ })
  hook_add:
    command! -nargs=* Tw :NeomakeSh task <args>

# ==========================================
# Operators
# ---------
- { repo: kana/vim-operator-user, lazy: 1 }

- repo: kana/vim-operator-replace
  depends: vim-operator-user
  on_map: { vnx: <Plug> }

- repo: rhysd/vim-operator-surround
  depends: [ vim-operator-user, vim-textobj-multiblock ]
  on_map: { vnx: <Plug> }

- repo: haya14busa/vim-operator-flashy
  depends: vim-operator-user
  on_map: { nx: <Plug> }

# ==========================================
# Text objects
# ------------
- { repo: kana/vim-textobj-user, on_func: textobj#user# }
- { repo: bkad/CamelCaseMotion, on_map: { nox: <Plug>CamelCaseMotion }}
- { repo: terryma/vim-expand-region, on_map: { x: <Plug> }}
- { repo: AndrewRadev/sideways.vim, on_map: { ox: <Plug>Sideways }}
- { repo: AndrewRadev/splitjoin.vim, on_map: { n: <Plug>Splitjoin }}
- { repo: AndrewRadev/linediff.vim, on_cmd: Linediff }

- repo: AndrewRadev/dsf.vim
  on_map: { n: <Plug>Dsf }
  hook_add: let g:dsf_no_mappings = 1

- repo: osyo-manga/vim-textobj-multiblock
  depends: vim-textobj-user
  on_map: { ox: <Plug> }
  hook_add: let g:textobj_multiblock_no_default_key_mappings = 1

- repo: kana/vim-textobj-function
  depends: vim-textobj-user
  on_map: { ox: <Plug> }
  hook_add: let g:textobj_function_no_default_key_mappings = 1


# ==========================================
# Experimental
# ------------

# https://www.abidibo.net/blog/2016/04/06/django-debug-vim-and-vdebug/
- repo: joonty/vdebug
  on_ft: py

# - repo: idanarye/vim-vebugger
#   on_ft: py

- repo: dbgx/lldb.nvim
  on_ft: [d, cpp, hpp, c, h]
  hook_add: |
    set hidden
    command! DDebug :AsyncRun dmd -g %:p

# command! DDebug :NeomakeSh dmd -g %:p

# I addend hidden with the hope that lldb.nvim will run more stable
# -gc --build=debug

# - repo: sbdchd/vim-run
#   on_ft: py
#   hook_add: |
#     let g:run_cmd_python = ['python3']
#     let g:run_split = 'down'
#     let g:run_auto_close = 0

# or fzy
# - repo: junegunn/fzf { 'dir': '~/.fzf', 'do': './install --all' }
- repo: junegunn/fzf.vim
  hook_source: set rtp+=~/.fzf

# https://github.com/ggreer/the_silver_searcher
- repo: mileszs/ack.vim
  hook_add: let g:ackprg = 'ag --nogroup --nocolor --column'

# let g:ackprg = 'ag --vimgrep'
# http://betterthanack.com/
# http://www.wezm.net/technical/2016/09/ripgrep-with-vim/
# https://github.com/jhawthorn/fzy

# delete asyncrun as soon neomakesh works for python
- repo: skywind3000/asyncrun.vim

# - repo: w0rp/ale

# https://8thlight.com/blog/chris-jordan/2016/06/13/running-tests-in-vim.html
# pytest config of blueyed: https://github.com/neomake/neomake/issues/1138
# - repo: janko-m/vim-test

# - repo: sbdchd/neoformat

# - repo: gotcha/vimpdb
# on_ft: py

# https://fortes.com/2017/language-server-neovim/
# - repo: autozimu/LanguageClient-neovim
#   hook_source: |
#     let g:LanguageClient_autoStart = 1
#     let g:LanguageClient_serverCommands = {}
#     let g:LanguageClient_serverCommands.python = ['pyls']
#     nnoremap  <leader>ld :call LanguageClient_textDocument_definition()<cr>
#     nnoremap  <leader>lh :call LanguageClient_textDocument_hover()<cr>
#     nnoremap  <leader>lr :call LanguageClient_textDocument_rename()<cr>
#   hook_add: |
#     set hidden


# let g:LanguageClient_serverCommands.python = ['pyls']
# <leader>ld to go to definition
# <leader>lh for type info under cursor
# <leader>lr to rename variable under cursor

# for completion: roxma/nvim-completion-manager
#

# autoformat

# Replace text with the contents of a register (copy/paste)
# - repo: vim-scripts/ReplaceWithRegister

# text editing
- repo: vim-scripts/utl.vim
  hook_add: |
    let g:utl_cfg_hdl_mt_text_directory='VIM'
    let g:utl_cfg_hdl_scm_http_system = "silent !firefox -remote 'ping()' &&
                                         \ firefox -remote 'openURL( %u )' ||
                                         \ firefox '%u#%f' &"

- repo: lervag/vimtex
- repo: wbthomason/buildit.nvim
- repo: msprev/unite-bibtex

# Editing Plugins
# see more on the wordy git-directory for more writing plugin suggestions
- repo: rhysd/vim-grammarous
- repo: dbmrq/vim-ditto
- repo: reedes/vim-wordy

# Navigate between wiki-markdown file:
- repo: mmai/vim-markdown-wiki

# http://vim.wikia.com/wiki/Open_a_web-browser_with_the_URL_in_the_current_line
- repo: tpope/vim-repeat
- repo: tpope/vim-speeddating
- repo: vim-scripts/SyntaxRange

# - repo: inkarkat/vim-SyntaxRange
# - repo: PeterRincker/vim-narrow

- repo: mmai/vim-markdown-wiki
  on_ft: [pdc, md, mkd]
  hook_source: |
    nnoremap <leader><CR> :MdwiGotoLink
    nnoremap <Leader><Backspace> :MdwiReturn
  hook_add:
    command! GoTo :MdwiGotoLink
    command! GoBack :MdwiReturn


# PLUGINS OBSERVED
# https://github.com/kassio/neoterm
# https://github.com/vimlab/split-term.vim
# - repo: jceb/vim-orgmode

# rhysd/clever-f.vim


# dwc: config-adjusted
# - repo: bfredl/nvim-ipy
# if: !exists('g:dwc_ipython_terminal')
# on_ft: py



#  vim: set ts=2 sw=2 tw=80 et :
