---
# My personal PLUGINS
# ==========================================

# Notes:
#   hook_add: load at Neovim startup
#   hook_source: load when plugin is started/sourced
#   hook_post_source: executed after plugin is sourced
#   put keyboar shortcuts in the hook_add block
#   in Vim only alphabetic letters can be mapped in combination with the CTRL key

# =======================================================
# Startup
# -------

- repo: xolox/vim-shell
- repo: xolox/vim-misc
- repo: Shougo/unite.vim
# - { repo: Shougo/unite.vim, on_source: [vimfiler, unite-bibtex] }
- repo: Shougo/vimfiler.vim
  depends: Shougo/unite.vim

# (Optional) Showing function signature and inline doc.
- repo: Shougo/echodoc.vim

# TODO check out usage
- repo: wbthomason/buildit.nvim

# http://vim.wikia.com/wiki/Open_a_web-browser_with_the_URL_in_the_current_line
# Vim sugar for the UNIX shell commands that need it the most.
- {repo: tpope/vim-eunuch}
- repo: tpope/vim-repeat
- repo: tpope/vim-speeddating
- repo: vim-scripts/SyntaxRange

# TODO load conditinally
- repo: junegunn/fzf.vim
  hook_source: set rtp+=~/.fzf

# - repo: kshenoy/vim-signature
# - repo: wdicarlo/vim-notebook

- repo: vim-scripts/utl.vim
  hook_add: |
    let g:utl_cfg_hdl_mt_text_directory='VIM'
    let g:utl_cfg_hdl_scm_http_system = "silent !firefox -remote 'ping()' &&
                                         \ firefox -remote 'openURL( %u )' ||
                                         \ firefox '%u#%f' &"

- repo: dbakker/vim-projectroot
  if: ! exists("g:gui_oni")
  hook_add: |
    let g:rootmarkers = ['.git', 'dub.json', 'dub.sdl', 'index.md', \
      'index.wiki', '.projectroot', '.svn']

# or moll / vim-bbye
- repo: qpkorr/vim-bufkill

# =======================================================
# General
# -------

# themis.vim is a testing framework for Vim script.

# not taking: cwoac/nvim

- repo: tomasiser/vim-code-dark
- repo: NLKNguyen/papercolor-theme

- repo: sjl/gundo.vim
  on_cmd: [GundoHide, GundoRenderGraph, GundoShow, GundoToggle]

- repo: qpkorr/vim-renamer
  on_cmd: Renamer

- repo: tpope/vim-abolish
  on_cmd: [Subvert, Abolish]
  on_ft: [md, pdc, tex, txt]
  on_map: {n: [crs, crm, crc, cru, cr-, cr., cr<space>, crt]}
  hook_post_source: source $VIMPATH/config_dw_after/plugins/abolish.vim

# https://github.com/ggreer/the_silver_searcher
# - repo: mileszs/ack.vim
#   hook_add: let g:ackprg = 'ag --nogroup --nocolor --column'

# TODO inspect
# - repo: pelodelfuego/vim-swoop
#   on_func: [Swoop, SwoopSelection, SwoopMulti, SwoopMultiSelection, \
#     SwoopPattern, SwoopMultiPattern]
#   hook_add: |
#     let g:swoopUseDefaultKeyMap = 0
#     let g:swoopIgnoreCase = 1
#     let g:swoopWindowsVerticalLayout = 1
#     nmap <Leader>s :call Swoop()<CR>
#     vmap <Leader>s :call SwoopSelection()<CR>
#     nmap <Leader>ms :call SwoopMulti()<CR>
#     vmap <Leader>ms :call SwoopMultiSelection()<CR>

- repo: mhinz/vim-startify
  on_cmd: [Startify, StartifyDebug]
  hook_add: |
    let g:startify_change_to_vcs_root = 0
    let g:startify_change_to_dir = 0
    let g:startify_update_oldfiles = 1
    let g:startify_session_persistence = 1
    let g:startify_disable_at_vimenter = 1

# TODO delete asyncrun as soon neomakesh works for python
- {repo: skywind3000/asyncrun.vim, on_cmd: AsyncRun}

# - repo: Vigemus/iron.nvim
# - repo: BurningEther/iron.nvim
#   on_ft: [python, py]
#   hook_add: |
#     let g:iron_repl_open_cmd='vsplit'
#     let g:iron_map_defaults=1

#  on_cmd: [IronPy, IronRepl, IronPromptRepl, IronPromptCommand]

# =======================================================
# Completion
# ----------
# - repo: landaire/deoplete-d
# rev: dub-based-imports
# - repo: monkoose/deoplete-d
# - repo: Sobaya007/deoplete-d

- repo: viniarck/deoplete-d
  on_ft: d
  if: has('nvim')

#   depends: [deoplete]
#   hook_add: |
#     let g:dmisc_dcd_bin_dir = '/home/dave/.dutils/DCD/bin/'
#     let g:deoplete#sources#d#dub_binary = '/usr/bin/dub'
#     let g:deoplete#sources#d#dcd_server_autostart = 1
#     let g:deoplete#sources#d#dcd_server_binary = g:dmisc_dcd_bin_dir.'dcd-server'
#     let g:deoplete#sources#d#dcd_client_binary = g:dmisc_dcd_bin_dir.'dcd-client'

# - repo: tjdevries/nvim-langserver-shim
#   on_ft: d
#   hook_add: |
#     let g:langserver_executables = {
#             \ 'd': {
#             \ 'name': 'Pure-D/serve-d',
#             \ 'cmd': ['serve-d'],
#             \ },
#             \ }

# TODO R completion:
# https://github.com/gaalcaras/ncm-R
# https://github.com/jalvesaq/Nvim-R/issues/326
# https://github.com/Shougo/deoplete.nvim/issues/745

# =======================================================
# Programming languages
# ---------------------

# scarface-one/vim-dlang-phobos-highlighter
# bsed/vim-dlang
# AndreaOrru/vim-dlang-autofold-unittest
# (jethrovt/oss-vim-dlang-autofold-unittests )
# if: ! exists('g:gui_oni')

- repo: idanarye/vim-dutyl
  on_ft: d
  on_cmd: [DUDCDrestartServer, DUjump, DUddoc, DUexecute, DUupdateCTags]
  hook_add: |
    let g:dmisc_dcd_bin_dir='/home/dave/.dutils/dcd/bin/'
    let g:dutyl_neverAddClosingParen = 1
    let g:dutyl_dontHandleIndent = 1
  hook_source: |
    autocmd! BufRead,BufEnter,BufNewFile *.d DUDCDrestartServer

# let g:dutyl_dontHandleFormat = 1
# hook_post_source: |
#   call dutyl#register#tool('dcd-client', '/home/dave/.dutils/dcd/bin/dcd-client')
#   call dutyl#register#tool('dcd-server', '/home/dave/.dutils/dcd/bin/dcd-server')
# call dutyl#register#tool('dcd-client', g:dmisc_dcd_bin_dir.'dcd-client')
# call dutyl#register#tool('dcd-server', g:dmisc_dcd_bin_dir.'dcd-server')

- repo: kraxli/nvim-py-minimal
  on_ft: [py, python]
  hook_add: |
    let g:minpy_default_keys = 1
    let g:minpy_color_column = 1
  hook_source: |
    au TermOpen * let g:last_ipy_terminal_job_id = b:terminal_job_id

- repo: python-rope/ropevim
  if: ! exists('g:gui_oni')
  hook_add: |
    let ropevim_vim_completion = 0
  on_ft: python

# - repo: nvie/vim-pyunit
# on_ft: py

- repo: alfredodeza/pytest.vim
  on_ft: [py, python]

# - repo: janko-m/vim-test
#   on_ft: [py, python]
#   hook_add: |
#     let test#strategy = "neovim"
#     let test#python#runner = "pytest"

# # Runners available are 'pytest', 'nose', 'nose2', 'djangotest',
# 'djangonose' and Python's built-in 'unittest'
# # or let test#strategy = 'neomake'

# https://medium.freecodecamp.org/turning-vim-into-an-r-ide-cd9602e8c217

- repo: jalvesaq/Nvim-R
  on_ft: r
  hook_add: |
    let R_assign = 2
    autocmd! MyAutoCmd FileType r set colorcolumn=+1
    autocmd MyAutoCmd FileType r set textwidth=80
    let g:rout_follow_colorscheme = 1
    let g:Rout_more_colors = 1
  hook_source: |
    let R_rconsole_width = 57
    let R_min_editor_width = 18
    autocmd! MyAutoCmd VimResized * let R_rconsole_width = winwidth(0) / 2

# R_assign: use double underscore for <-
# let R_assign_map = ":"
# let R_assign_map = "<M-_>"

# TODO: to be removed aafter ncm-R supports deoplete
- repo: roxma/nvim-completion-manager
  on_ft: r

- repo: gaalcaras/ncm-R
  on_ft: r

- repo: vim-scripts/octave.vim
  on_ft: [m, oct]

# https://www.abidibo.net/blog/2016/04/06/django-debug-vim-and-vdebug/
# - repo: joonty/vdebug
# on_ft: py

# - repo: idanarye/vim-vebugger
#   on_ft: py

- repo: dbgx/lldb.nvim
  on_ft: [d, cpp, hpp, c, h]
  hook_add: |
    set hidden
    command! DDebug :AsyncRun dmd -g %:p


# =======================================================
# Snippets
# --------

# dway: vim-config-adjusted (see also bellow for g:neosnippet#data_directory)
- repo: honza/vim-snippets
- repo: kiith-sa/DSnips

# TODO
# # https://www.gregjs.com/vim/2016/neovim-deoplete-jspc-ultisnips-and-tern-a-config-for-kickass-autocompletion/
# - repo: SirVer/ultisnips
#   depends: [ vim-snippets, DSnips ]
#   hook_add: |
#     let g:UltiSnipsSnippetsDir=['UltiSnips',
#       \ $VARPATH. '/dein/repos/github.com' . '/honza/vim-snippets/UltiSnips',
#       \ $VARPATH . '/dein/repos/github.com' . "/kiith-sa/DSnips"]
#     let g:UltiSnipsUsePythonVersion = 3
#     let g:UltiSnipsEditSplit="vertical"

#   on_event: InsertCharPre
#   on_ft: snippets
#   hook_add: |
#     let g:UltiSnipsUsePythonVersion = 3
#     let g:UltiSnipsListSnippets="<c-ll>"
#     let g:UltiSnipsExpandTrigger="<c-ll>"
#     let g:UltiSnipsJumpForwardTrigger="<c-o>"
#     let g:UltiSnipsJumpBackwardTrigger="<c-s-o>"
#     let g:UltiSnipsEditSplit="vertical"

# =======================================================
# Interface
# ---------
# - repo: Yggdroot/indentLine
#   hook_add: |
#     let g:indentLine_fileTypeExclude = [ 'help', 'denite', 'codi', 'startify' ]
#     let g:indentLine_fileTyp = ['python']
#     let g:indentLine_char =  '‚ñè'
#     set list lcs=tab:\|\

# =======================================================
# Organizers and Note taking
# --------------------------
# - repo: mmai/vim-markdown-wiki
#   on_ft: [pdc, md, mkd, markdown, pandoc]
#   hook_source: |
#     autocmd MyAutoCmd FileType markdown nnoremap <CR> :MdwiGotoLink<cr>
#     autocmd MyAutoCmd FileType markdown nnoremap <Backspace> :MdwiReturn<CR>
#   hook_add:
#     command! GoTo :MdwiGotoLink<cr>
#     command! GoBack :MdwiReturn<cr>

# - repo: tbabej/taskwiki
#   on_ft: [vimwiki]

- repo: blindFS/vim-taskwarrior
  on_cmd: [TW, TWAdd, TWSync]

- repo: powerman/vim-plugin-AnsiEsc
  on_ft: [vimwiki]

- repo: rafi/vim-denite-task
  on_cmd: [Tw]
  hook_source: |
    call denite#custom#var('task', 'taskrc', '~/.taskrc')
    call denite#custom#var('task', 'data_dir', '~/.task')
    call denite#custom#var('task', 'date_format', '%y-%m-%d %H:%M')
    call denite#custom#var('task', 'format', '{id:3.3} | {priority:1.1} |
      {project:15.15} | {description:40.40} | {entry} | {due}')
    call denite#custom#var('task', 'label_width', '17')
  hook_add: |
    command! -nargs=* Tw :NeomakeSh task <args>

# dway: vim-config-adjusted
# - repo: xolox/vim-notes
#   on_cmd: Note

- repo: kraxli/vimwiki-task
  on_ft: [vimwiki]
  hook_add: let g:vimwiki_folding = 'custom'
  hook_source: |
    setlocal spell spelllang=en,de
  hook_post_source: source $VIMPATH/config_dw_after/plugins/vimwiki.vim

# =======================================================
# Text processing / editing
# -------------------------

# https://github.com/jszakmeister/markdown2ctags
# - repo: kraxli/tagbar-markdown.vim
#   on_ft: [markdown, vimwiki]

# - repo: gabrielelana/vim-markdown
#   on_ft: markdown
#   hook_add: |
#     let g:markdown_enable_conceal = 1
#     let g:markdown_enable_folding = 1

# TODO usage and better integration
# - repo: lervag/vimtex
#   on_ft: [tex, latex]

# - repo: msprev/unite-bibtex
#   depends: Shougo/unite.vim
#   on_ft: [tex, latex, pdc, pandoc, markdown]

# TODO does wordy makes this redundant?
- repo: rhysd/vim-grammarous
  on_cmd: [GrammarousCheck, 'Unite grammarous']

# TODO load on commands and maybe add mappings
- repo: dbmrq/vim-ditto
  on_ft: [tex, latex, txt, text, pdc, pandoc, md, markdown, wiki, vimwiki]

- repo: godlygeek/tabular
  on_ft: [tex, latex, txt, text, pdc, pandoc, md, markdown, wiki, vimwiki]

# https://fortes.com/2017/language-server-neovim/
# - repo: SpaceVim/LanguageClient-neovim
- repo: autozimu/LanguageClient-neovim
  build: bash install.sh
  on_ft: [python, d]
  rev: next
  hook_source: |
    let g:LanguageClient_autoStart = 1
    let g:LanguageClient_serverCommands = {}
    nnoremap  <leader>ld :call LanguageClient_textDocument_definition()<cr>
    nnoremap  <leader>lh :call LanguageClient_textDocument_hover()<cr>
    nnoremap  <leader>lr :call LanguageClient_textDocument_rename()<cr>
    let g:LanguageClient_serverCommands = {
    \ 'd': ['serve-d'],
    \ }
    let g:LanguageClient_serverCommands.python = ['pyls']
  hook_add: |
    set hidden
    set formatexpr=LanguageClient#textDocument_rangeFormatting_sync()

# for completion: roxma/nvim-completion-manager

# =======================================================
# Plugins not yet used
# --------------------

# command! DDebug :NeomakeSh dmd -g %:p

# I addend hidden with the hope that lldb.nvim will run more stable
# -gc --build=debug

# - repo: sbdchd/vim-run
#   on_ft: py
#   hook_add: |
#     let g:run_cmd_python = ['python3']
#     let g:run_split = 'down'
#     let g:run_auto_close = 0

# let g:ackprg = 'ag --vimgrep'
# http://betterthanack.com/
# http://www.wezm.net/technical/2016/09/ripgrep-with-vim/
# https://github.com/jhawthorn/fzy

# TODO: remove after neomake supports R
- repo: w0rp/ale
  on_ft: [r]
  hook_source: |
    nmap <F8> <Plug>(ale_fix)
    let g:ale_fixers = {
    \ 'd': [
    \   'uncrustify',
    \       'remove_trailing_lines',
    \       'trim_whitespace'
    \       ]
    \ }


# https://8thlight.com/blog/chris-jordan/2016/06/13/running-tests-in-vim.html
# pytest config of blueyed: https://github.com/neomake/neomake/issues/1138
# - repo: janko-m/vim-test

# - repo: sbdchd/neoformat

# - repo: gotcha/vimpdb
# on_ft: py

# Replace text with the contents of a register (copy/paste)
# - repo: vim-scripts/ReplaceWithRegister

# - repo: inkarkat/vim-SyntaxRange
# - repo: PeterRincker/vim-narrow

# - repo: vim-scripts/mappingmanager
# - repo: sunaku/vim-shortcut

# - repo: hecal3/vim-leader-guide
#   hook_add: |
#     nnoremap <silent> <leader> :<c-u>LeaderGuide '<Space>'<CR>
#     vnoremap <silent> <leader> :<c-u>LeaderGuideVisual '<Space>'<CR>
#     map <leader>. <Plug>leaderguide-global
#     nnoremap <silent> <localleader> :<c-u>LeaderGuide ','<CR>
#     vnoremap <silent> <localleader> :<c-u>LeaderGuideVisual ','<CR>
#     map <localleader>. <Plug>leaderguide-global
#     nnoremap <silent> ; :<c-u>LeaderGuide ';'<CR>
#     vnoremap <silent> ; :<c-u>LeaderGuideVisual ';'<CR>
#   hook_post_source: |
#     let g:leaderGuide_max_size = 5
#     let g:leaderGuide_submode_mappings = \
#     { '<C-F>': 'page_down', '<C-B>': 'page_up'}
#     call leaderGuide#register_prefix_descriptions("<Space>", "g:lmap")
#     call leaderGuide#register_prefix_descriptions(";", "g:llmap")


# PLUGINS TO CHECKOUT
# tpope/vim-vinegar
# tpope/vim-sensible
# haya14busa/incsearch.vim

# PLUGINS OBSERVED
# https://github.com/kassio/neoterm
# https://github.com/vimlab/split-term.vim
# osyo-manga/vim-over

# rhysd/clever-f.vim


# - repo: bfredl/nvim-ipy
# if: ! exists('g:dwc_ipython_terminal')
# on_ft: py


#  vim: set ts=2 sw=2 tw=80 et :
